<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ assembly name="$(SolutionDir)\AssemblyVersion\Libraries\Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>

<# 
    //Read AssemblyVersion.json and convert to object
    string avPath = this.Host.ResolvePath("AssemblyVersion.json");
    string avJson = File.ReadAllText(avPath);

    var avDefinition = new { 
        initialDate = "", 
        versions = new [] {
            new { 
                major = 0, 
                minor = 0, 
                releaseDate = "", 
                remarks = "" }
        }
    };
    var avObject = JsonConvert.DeserializeAnonymousType(avJson, avDefinition);

    //Get highest Major/Minor from versions list
    var maxVersion = avObject.versions.OrderByDescending(i => i.major).ThenByDescending(j => j.minor).First();

    //Set MAJOR
    int major = maxVersion.major;

    //Set MINOR
    int minor = maxVersion.minor;

    //Get BuildLog of max version
    string buildlogFolder = this.Host.ResolvePath("BuildLogs");
    string buildLog = buildlogFolder + "\\" + maxVersion.major + "." + maxVersion.minor + ".log";
    
    //Get number of lines from BuildLog
    var buildCount = 0;
    if (File.Exists(buildLog)) {
        buildCount = File.ReadLines(buildLog).Count();
    } else {
        File.Create(buildLog).Dispose();
    }

    //Set BUILD
    int build = buildCount;

    //Set REVISION
    var dateCreated = DateTime.Parse(avObject.initialDate);
    int revision = (DateTime.Now.Date - dateCreated.Date).Days;
#>

// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.

using System.Reflection;
 
[assembly: AssemblyVersion("<#= $"{major}.{minor}.{build}.{revision}" #>")]
[assembly: AssemblyFileVersion("<#= $"{major}.{minor}.{build}.{revision}" #>")]